// Generated by ts-to-zod
import { z } from "zod";
import {
  CrmE12_Production, CrmE13_Attribute_Assignment, CrmE33_E41_Linguistic_Appellation, CrmE33_Linguistic_Object, CrmE33_Linguistic_Object2, CrmE36_Visual_Item, CrmE42_Identifier, CrmE54_Dimension, CrmE55_Type, CrmE7_Activity1, CrmE80_Part_Removal, CrmP108IWasProducedBy, CrmP113IWasRemovedBy, CrmP129IIsSubjectOf, CrmP138IHasRepresentation, CrmP13IWasDestroyedBy, CrmP140IWasAttributedBy, CrmP141IWasAssignedBy, CrmP16IWasUsedFor, CrmP191HadDuration, CrmP1IsIdentifiedBy, CrmP2HasType, CrmP32UsedGeneralTechnique, CrmP43HasDimension, CrmP46IsComposedOf, CrmP4HasTimeSpan, CrmP67IIsReferredToBy, DigD1_Digital_Object, HumanMadeObjectSchema, LaDigitallyCarriedBy, LaDigitallyShownBy, SciO19IWasObjectEncounteredAt,
  SciS19_Encounter_Event
} from "./../types/object.d";

export const linkedArtSchema = z.literal(
  "https://linked.art/ns/v1/linked-art.json",
);

export const linkedArtWithExtensionsSchema = z.array(z.string());

export const theSubjectUriSchema = z.string().url();

export const genericString = z.string();

export const objectTypeSchema = z.literal("HumanMadeObject");
export const nameTypeSchema = z.literal("Name");
export const typeTypeSchema = z.literal("Type");
export const textTypeSchema = z.literal("LinguisticObject");
export const digitalObjectTypeSchema = z.literal("DigitalObject");
export const identifierTypeSchema = z.literal("Identifier");
export const attributionAssignmentTypeSchema = z.literal("AttributeAssignment");
export const placeTypeSchema = z.literal("Place");
export const timespanTypeSchema = z.literal("TimeSpan");
export const dimensionTypeSchema = z.literal("Dimension");
export const personTypeSchema = z.literal("Person");
export const groupTypeSchema = z.literal("Group");
export const visualItemTypeSchema = z.literal("VisualItem");
export const activityTypeSchema = z.literal("Activity");
export const productionSchema = z.literal("Production");
export const destructionTypeSchema = z.literal("Destruction");
export const partRemovalTypeSchema = z.literal("PartRemoval");
export const encounterTypeSchema = z.literal("Encounter");
export const rightTypeSchema = z.literal("Right");
export const setTypeSchema = z.literal("Set");
export const eventTypeSchema = z.literal("Event");
export const periodTypeSchema = z.literal("Period");

export const allTypesSchema = z.union([
  objectTypeSchema,
  personTypeSchema,
  groupTypeSchema,
  visualItemTypeSchema,
  textTypeSchema,
  placeTypeSchema,
  digitalObjectTypeSchema,
  typeTypeSchema,
  activityTypeSchema,
  setTypeSchema,
  eventTypeSchema,
  periodTypeSchema,
]);

export const rdfTypeSchema = z.string();
export const langLabelSchema = z.record(z.string(), z.array(z.string()));
export const rdfsLabelSchema = genericString.or(langLabelSchema); // Not compliant with Linked Art, as it expects a string (export const rdfsLabelSchema = z.string();)
export const crmP190HasSymbolicContentSchema = z.string();
export const dcFormatSchema = z.string();

export const crmP82ABeginOfTheBeginSchema = z.string();
export const crmP81AEndOfTheBeginSchema = z.string();
export const crmP81BBeginOfTheEndSchema = z.string();
export const crmP82BEndOfTheEndSchema = z.string();
export const crmP90HasValueSchema = z.number();
export const crmP90AHasLowerValueLimitSchema = z.number();
export const crmP90AHasUpperValueLimitSchema = z.number();
export const crmP177AssignedPropertyTypeSchema = z.string();

export const genericReference = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(allTypesSchema),
  _label: rdfsLabelSchema.optional(),
});

export const genericReferencesSchema = z.array(genericReference);

export const crmE56LanguageSchema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(z.literal("Language")),
  _label: rdfsLabelSchema.optional(),
});

export const digD1DigitalObjectSeeSchemaDigitalHtmlSchema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(digitalObjectTypeSchema),
  _label: rdfsLabelSchema.optional(),
});

export const crmE33LinguisticObject1Schema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(z.literal("LinguisticObject")),
  _label: rdfsLabelSchema.optional(),
});

export const crmP128CarriesSchema = z.array(crmE33LinguisticObject1Schema);

export const crmE53PlaceSchema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(placeTypeSchema),
  _label: rdfsLabelSchema.optional(),
});

export const crmE6EventSchema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(z.literal("Event")),
  _label: rdfsLabelSchema.optional(),
});

export const crmE7ActivitySchema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(z.literal("Activity")),
  _label: rdfsLabelSchema.optional(),
});

export const e21PersonSchema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(personTypeSchema),
  _label: rdfsLabelSchema.optional(),
});

export const crmE74GroupSchema = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(groupTypeSchema),
  _label: rdfsLabelSchema.optional(),
});

export const crmE22HumanMadeObjectSchema = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(objectTypeSchema),
  _label: rdfsLabelSchema.optional(),
});

export const crmE22HumanMadeObjectsSchema = z.array(crmE22HumanMadeObjectSchema);

export const laSetSchema = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(z.literal("Set")),
  _label: rdfsLabelSchema.optional(),
});

export const laMemberOfSchema = z.array(laSetSchema);

export const laAccessPointSchema = z.array(
  digD1DigitalObjectSeeSchemaDigitalHtmlSchema,
);

export const crmE73InformationObjectSchema = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(z.literal("InformationObject")),
  _label: rdfsLabelSchema.optional(),
});

export const crmE57MaterialSchema = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(z.literal("Material")),
  _label: rdfsLabelSchema.optional(),
});

export const crmP52HasCurrentOwnerSchema = z.array(
  z.union([e21PersonSchema, crmE74GroupSchema]),
);

export const crmP50HasCurrentKeeperSchema = z.array(
  z.union([e21PersonSchema, crmE74GroupSchema]),
);

export const laCurrentPermanentCustodianSchema = z.array(
  z.union([e21PersonSchema, crmE74GroupSchema]),
);

export const crmE36VisualItem1Schema = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(z.literal("VisualItem")),
  _label: rdfsLabelSchema.optional(),
});


export const crmP9IFormsPartOfSchema = z.union([
  crmE6EventSchema,
  crmE7ActivitySchema,
]);

export const crmP9IFormsPartOf1Schema = z.union([
  crmE6EventSchema,
  crmE7ActivitySchema,
]);

export const crmP9IFormsPartOf2Schema = z.union([
  crmE6EventSchema,
  crmE7ActivitySchema,
]);

export const crmP9IFormsPartOf3Schema = z.union([
  crmE6EventSchema,
  crmE7ActivitySchema,
]);

export const crmE22HumanMadeObject1Schema = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(objectTypeSchema),
  _label: rdfsLabelSchema.optional(),
});

export const crmP55HasCurrentLocationSchema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(placeTypeSchema),
  _label: rdfsLabelSchema.optional(),
});

export const noName1Schema = z.record(z.unknown());

export const crmP91HasUnitSchema = z.object({
  id: theSubjectUriSchema,
  type: genericString.and(z.literal("MeasurementUnit")),
  _label: rdfsLabelSchema.optional(),
});

export const crmE22HumanMadeObject2Schema = z.object({
  id: theSubjectUriSchema,
  type: rdfTypeSchema.and(objectTypeSchema),
  _label: rdfsLabelSchema.optional(),
});

export const jSONLDContextSchema = z.union([
  linkedArtSchema,
  linkedArtWithExtensionsSchema,
]);

export const crmP72HasLanguageSchema = z.array(crmE56LanguageSchema);

export const crmP7TookPlaceAtSchema = z.array(crmE53PlaceSchema);

export const sciO13IIsTriggeredBySchema = z.array(
  z.union([crmE6EventSchema, crmE7ActivitySchema]),
);

export const crmP14CarriedOutBySchema = z.array(
  z.union([e21PersonSchema, crmE74GroupSchema]),
);

export const crmP75IPossessedBySchema = z.array(
  z.union([e21PersonSchema, crmE74GroupSchema]),
);

export const crmP16UsedSpecificObjectSchema = z.array(
  z.union([crmE22HumanMadeObjectSchema, laSetSchema]),
);

export const crmP15WasInfluencedBySchema = z.array(genericReference);

export const dctermsConformsToSchema = z.array(crmE73InformationObjectSchema);

export const crmP45ConsistsOfSchema = z.array(crmE57MaterialSchema);

export const crmP65ShowsVisualItemSchema = z.array(crmE36VisualItem1Schema);

export const crmP2HasTypeSchema: z.ZodSchema<CrmP2HasType> = z.lazy(() =>
  z.array(crmE55TypeSchema),
);

export const crmE55TypeSchema: z.ZodSchema<CrmE55_Type> = z.lazy(() =>
  z.object({
    id: theSubjectUriSchema,
    _label: rdfsLabelSchema.optional(),
    type: genericString.and(typeTypeSchema),
    identified_by: crmP1IsIdentifiedBySchema.optional(),
    classified_as: crmP2HasTypeSchema.optional(),
  }),
);

export const crmP67IIsReferredToBySchema: z.ZodSchema<CrmP67IIsReferredToBy> =
  z.lazy(() =>
    z.array(
      z.union([
        crmE33LinguisticObjectSchema,
        digD1DigitalObjectSeeSchemaDigitalHtmlSchema,
        crmE33LinguisticObject1Schema,
      ]),
    ),
  );

export const crmE33LinguisticObjectSchema: z.ZodSchema<CrmE33_Linguistic_Object> =
  z.lazy(() =>
    z.object({
      _label: rdfsLabelSchema.optional(),
      type: genericString.and(textTypeSchema),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      referred_to_by: crmP67IIsReferredToBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      content: crmP190HasSymbolicContentSchema,
      language: crmP72HasLanguageSchema.optional(),
      format: dcFormatSchema.optional(),
    }),
  );

export const crmE30RightsSchema: z.ZodSchema =
  z.lazy(() =>
    z.object({
      id: theSubjectUriSchema,
      _label: rdfsLabelSchema.optional(),
      type: genericString.and(rightTypeSchema),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      referred_to_by: crmP67IIsReferredToBySchema.optional(),
      possessed_by: crmP75IPossessedBySchema,
      subject_of: crmP129IIsSubjectOfSchema.optional(),
    }),
  );

export const crmP141IWasAssignedBySchema: z.ZodSchema<CrmP141IWasAssignedBy> =
  z.lazy(() => z.array(crmE13AttributeAssignmentSchema));

export const crmE13AttributeAssignmentSchema: z.ZodSchema<CrmE13_Attribute_Assignment> =
  z.lazy(() =>
    z.object({
      type: genericString.and(attributionAssignmentTypeSchema),
      _label: rdfsLabelSchema.optional(),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      referred_to_by: crmP67IIsReferredToBySchema.optional(),
      took_place_at: crmP7TookPlaceAtSchema.optional(),
      timespan: crmP4HasTimeSpanSchema.optional(),
      caused_by: sciO13IIsTriggeredBySchema.optional(),
      carried_out_by: crmP14CarriedOutBySchema.optional(),
      used_specific_object: crmP16UsedSpecificObjectSchema.optional(),
      influenced_by: crmP15WasInfluencedBySchema.optional(),
      technique: crmP32UsedGeneralTechniqueSchema.optional(),
      part_of: z.union([crmE6EventSchema, crmE7ActivitySchema]).optional(),
      assigned: noName1Schema.optional(),
      assigned_property: crmP177AssignedPropertyTypeSchema.optional(),
    }),
  );

export const crmP32UsedGeneralTechniqueSchema: z.ZodSchema<CrmP32UsedGeneralTechnique> =
  z.lazy(() => z.array(crmE55TypeSchema));

export const crmP1IsIdentifiedBySchema: z.ZodSchema<CrmP1IsIdentifiedBy> =
  z.lazy(() =>
    z.array(
      z.union([crmE33E41LinguisticAppellationSchema, crmE42IdentifierSchema]),
    ),
  );

export const crmE33E41LinguisticAppellationSchema: z.ZodSchema<CrmE33_E41_Linguistic_Appellation> =
  z.lazy(() =>
    z.object({
      _label: rdfsLabelSchema.optional(),
      type: genericString.and(nameTypeSchema),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      content: crmP190HasSymbolicContentSchema,
      language: crmP72HasLanguageSchema.optional(),
      referred_to_by: crmP67IIsReferredToBySchema.optional(),
      part: z.array(crmE33E41LinguisticAppellationSchema).optional(),
    }),
  );

export const crmE42IdentifierSchema: z.ZodSchema<CrmE42_Identifier> = z.lazy(
  () =>
    z.object({
      _label: rdfsLabelSchema.optional(),
      type: genericString.and(identifierTypeSchema),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      content: crmP190HasSymbolicContentSchema,
      part: z.array(crmE42IdentifierSchema).optional(),
      assigned_by: z.array(crmE13AttributeAssignmentSchema).optional(),
    }),
);

export const laDigitallyShownBySchema: z.ZodSchema<LaDigitallyShownBy> = z.lazy(
  () => z.array(digD1DigitalObjectSchema),
);

export const digD1DigitalObjectSchema: z.ZodSchema<DigD1_Digital_Object> =
  z.lazy(() =>
    z.record(z.unknown()).and(
      z.object({
        type: rdfTypeSchema.and(digitalObjectTypeSchema).optional(),
        _label: rdfsLabelSchema.optional(),
        identified_by: crmP1IsIdentifiedBySchema.optional(),
        classified_as: crmP2HasTypeSchema.optional(),
        referred_to_by: crmP67IIsReferredToBySchema.optional(),
        access_point: laAccessPointSchema.optional(),
        format: dcFormatSchema.optional(),
        conforms_to: dctermsConformsToSchema.optional(),
      }),
    ),
  );

export const crmP138IHasRepresentationSchema: z.ZodSchema<CrmP138IHasRepresentation> =
  z.lazy(() => z.array(crmE36VisualItemSchema));

export const crmE36VisualItemSchema: z.ZodSchema<CrmE36_Visual_Item> = z.lazy(
  () =>
    z.object({
      type: rdfTypeSchema.and(visualItemTypeSchema),
      _label: rdfsLabelSchema.optional(),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      referred_to_by: crmP67IIsReferredToBySchema.optional(),
      digitally_shown_by: laDigitallyShownBySchema.optional(),
    }),
);

export const laDigitallyCarriedBySchema: z.ZodSchema<LaDigitallyCarriedBy> =
  z.lazy(() => z.array(digD1DigitalObjectSchema));

export const crmP129IIsSubjectOfSchema: z.ZodSchema<CrmP129IIsSubjectOf> =
  z.lazy(() => z.array(crmE33LinguisticObject2Schema));

export const crmP104IsSubjectToSchema: z.ZodSchema =
  z.lazy(() => z.array(crmE30RightsSchema));

export const crmE33LinguisticObject2Schema: z.ZodSchema<CrmE33_Linguistic_Object2> =
  z.lazy(() =>
    z.object({
      type: rdfTypeSchema.and(textTypeSchema),
      _label: rdfsLabelSchema.optional(),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      referred_to_by: crmP67IIsReferredToBySchema.optional(),
      language: crmP72HasLanguageSchema.optional(),
      digitally_carried_by: laDigitallyCarriedBySchema.optional(),
    }),
  );

export const crmP140IWasAttributedBySchema: z.ZodSchema<CrmP140IWasAttributedBy> =
  z.lazy(() => z.array(crmE13AttributeAssignmentSchema));

export const crmP43HasDimensionSchema: z.ZodSchema<CrmP43HasDimension> = z.lazy(
  () => z.array(crmE54DimensionSchema),
);

export const crmE54DimensionSchema: z.ZodSchema<CrmE54_Dimension> = z.lazy(() =>
  z.object({
    _label: rdfsLabelSchema.optional(),
    type: genericString.and(dimensionTypeSchema),
    identified_by: crmP1IsIdentifiedBySchema.optional(),
    classified_as: crmP2HasTypeSchema.optional(),
    value: crmP90HasValueSchema,
    lower_value_limit: crmP90AHasLowerValueLimitSchema.optional(),
    upper_value_limit: crmP90AHasUpperValueLimitSchema.optional(),
    unit: crmP91HasUnitSchema,
    assigned_by: crmP141IWasAssignedBySchema.optional(),
  }),
);

export const crmP16IWasUsedForSchema: z.ZodSchema<CrmP16IWasUsedFor> = z.lazy(
  () => z.array(crmE7Activity1Schema),
);

export const crmE7Activity1Schema: z.ZodSchema<CrmE7_Activity1> = z.lazy(() =>
  z.object({
    type: rdfTypeSchema.and(activityTypeSchema),
    _label: rdfsLabelSchema.optional(),
    identified_by: crmP1IsIdentifiedBySchema.optional(),
    classified_as: crmP2HasTypeSchema.optional(),
    referred_to_by: crmP67IIsReferredToBySchema.optional(),
    took_place_at: crmP7TookPlaceAtSchema.optional(),
    timespan: crmP4HasTimeSpanSchema.optional(),
    caused_by: sciO13IIsTriggeredBySchema.optional(),
    carried_out_by: crmP14CarriedOutBySchema.optional(),
    used_specific_object: crmP16UsedSpecificObjectSchema.optional(),
    influenced_by: crmP15WasInfluencedBySchema.optional(),
    technique: crmP32UsedGeneralTechniqueSchema.optional(),
    part_of: z.union([crmE6EventSchema, crmE7ActivitySchema]).optional(),
  }),
);

export const crmP46IsComposedOfSchema: z.ZodSchema<CrmP46IsComposedOf> = z.lazy(
  () => z.array(crmE12ProductionSchema),
);

export const crmE12ProductionSchema: z.ZodSchema<CrmE12_Production> = z.lazy(
  () =>
    z.record(z.unknown()).and(
      z.object({
        type: rdfTypeSchema.and(productionSchema).optional(),
        _label: rdfsLabelSchema.optional(),
        identified_by: crmP1IsIdentifiedBySchema.optional(),
        classified_as: crmP2HasTypeSchema.optional(),
        referred_to_by: crmP67IIsReferredToBySchema.optional(),
        took_place_at: crmP7TookPlaceAtSchema.optional(),
        timespan: crmP4HasTimeSpanSchema.optional(),
        caused_by: sciO13IIsTriggeredBySchema.optional(),
        carried_out_by: crmP14CarriedOutBySchema.optional(),
        used_specific_object: crmP16UsedSpecificObjectSchema.optional(),
        influenced_by: crmP15WasInfluencedBySchema.optional(),
        technique: crmP32UsedGeneralTechniqueSchema.optional(),
        part_of: crmP9IFormsPartOfSchema.optional(),
        part: crmP46IsComposedOfSchema.optional(),
      }).strict(),
    ),
);

export const crmP113IWasRemovedBySchema: z.ZodSchema<CrmP113IWasRemovedBy> =
  z.lazy(() => z.array(crmE80PartRemovalSchema));

export const crmE80PartRemovalSchema: z.ZodSchema<CrmE80_Part_Removal> = z.lazy(
  () =>
    z.record(z.unknown()).and(
      z.object({
        type: rdfTypeSchema.and(partRemovalTypeSchema).optional(),
        _label: rdfsLabelSchema.optional(),
        identified_by: crmP1IsIdentifiedBySchema.optional(),
        classified_as: crmP2HasTypeSchema.optional(),
        referred_to_by: crmP67IIsReferredToBySchema.optional(),
        took_place_at: crmP7TookPlaceAtSchema.optional(),
        timespan: crmP4HasTimeSpanSchema.optional(),
        caused_by: sciO13IIsTriggeredBySchema.optional(),
        carried_out_by: crmP14CarriedOutBySchema.optional(),
        used_specific_object: crmP16UsedSpecificObjectSchema.optional(),
        influenced_by: crmP15WasInfluencedBySchema.optional(),
        technique: crmP32UsedGeneralTechniqueSchema.optional(),
        part_of: crmP9IFormsPartOf2Schema.optional(),
        diminished: crmE22HumanMadeObject2Schema.optional(),
      }),
    ),
);

export const sciO19IWasObjectEncounteredAtSchema: z.ZodSchema<SciO19IWasObjectEncounteredAt> =
  z.lazy(() => z.array(sciS19EncounterEventSchema));

export const sciS19EncounterEventSchema: z.ZodSchema<SciS19_Encounter_Event> =
  z.lazy(() =>
    z.record(z.unknown()).and(
      z.object({
        type: rdfTypeSchema.and(encounterTypeSchema).optional(),
        _label: rdfsLabelSchema.optional(),
        identified_by: crmP1IsIdentifiedBySchema.optional(),
        classified_as: crmP2HasTypeSchema.optional(),
        referred_to_by: crmP67IIsReferredToBySchema.optional(),
        took_place_at: crmP7TookPlaceAtSchema.optional(),
        timespan: crmP4HasTimeSpanSchema.optional(),
        caused_by: sciO13IIsTriggeredBySchema.optional(),
        carried_out_by: crmP14CarriedOutBySchema.optional(),
        used_specific_object: crmP16UsedSpecificObjectSchema.optional(),
        influenced_by: crmP15WasInfluencedBySchema.optional(),
        technique: crmP32UsedGeneralTechniqueSchema.optional(),
        part_of: crmP9IFormsPartOf3Schema.optional(),
      }),
    ),
  );

export const humanMadeObjectSchema: z.ZodSchema<HumanMadeObjectSchema> =
  z.lazy(() =>
    z.object({
      "@context": jSONLDContextSchema,
      id: theSubjectUriSchema,
      type: genericString.and(objectTypeSchema),
      _label: rdfsLabelSchema,
      _available: z.string(),
      _modified: z.string(),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      referred_to_by: crmP67IIsReferredToBySchema.optional(),
      equivalent: genericReferencesSchema.and(crmE22HumanMadeObjectsSchema).optional(),
      representation: crmP138IHasRepresentationSchema.optional(),
      member_of: laMemberOfSchema.optional(),
      subject_of: crmP129IIsSubjectOfSchema.optional(),
      attributed_by: crmP140IWasAttributedBySchema.optional(),
      dimension: crmP43HasDimensionSchema.optional(),
      made_of: crmP45ConsistsOfSchema.optional(),
      part_of: crmE22HumanMadeObject1Schema.optional(),
      current_owner: crmP52HasCurrentOwnerSchema.optional(),
      current_custodian: crmP50HasCurrentKeeperSchema.optional(),
      current_permanent_custodian: laCurrentPermanentCustodianSchema.optional(),
      current_location: crmP55HasCurrentLocationSchema.optional(),
      used_for: crmP16IWasUsedForSchema.optional(),
      shows: crmP65ShowsVisualItemSchema.optional(),
      carries: crmP128CarriesSchema.optional(),
      produced_by: crmP108IWasProducedBySchema.optional(),
      destroyed_by: crmP13IWasDestroyedBySchema.optional(),
      removed_by: crmP113IWasRemovedBySchema.optional(),
      encountered_by: sciO19IWasObjectEncounteredAtSchema.optional(),
      subject_to: crmP104IsSubjectToSchema.optional(),
    }).strict(),
  );

export const crmP108IWasProducedBySchema: z.ZodSchema<CrmP108IWasProducedBy> =
  z.lazy(() =>
    z.record(z.unknown()).and(
      z.object({
        type: rdfTypeSchema.and(productionSchema).optional(),
        _label: rdfsLabelSchema.optional(),
        identified_by: crmP1IsIdentifiedBySchema.optional(),
        classified_as: crmP2HasTypeSchema.optional(),
        referred_to_by: crmP67IIsReferredToBySchema.optional(),
        took_place_at: crmP7TookPlaceAtSchema.optional(),
        timespan: crmP4HasTimeSpanSchema.optional(),
        caused_by: sciO13IIsTriggeredBySchema.optional(),
        carried_out_by: crmP14CarriedOutBySchema.optional(),
        used_specific_object: crmP16UsedSpecificObjectSchema.optional(),
        influenced_by: crmP15WasInfluencedBySchema.optional(),
        technique: crmP32UsedGeneralTechniqueSchema.optional(),
        part_of: crmP9IFormsPartOfSchema.optional(),
        part: crmP46IsComposedOfSchema.optional(),
      }),
    ),
  );

export const crmP13IWasDestroyedBySchema: z.ZodSchema<CrmP13IWasDestroyedBy> =
  z.lazy(() =>
    z.record(z.unknown()).and(
      z.object({
        type: rdfTypeSchema.and(destructionTypeSchema).optional(),
        _label: rdfsLabelSchema.optional(),
        identified_by: crmP1IsIdentifiedBySchema.optional(),
        classified_as: crmP2HasTypeSchema.optional(),
        referred_to_by: crmP67IIsReferredToBySchema.optional(),
        took_place_at: crmP7TookPlaceAtSchema.optional(),
        timespan: crmP4HasTimeSpanSchema.optional(),
        caused_by: sciO13IIsTriggeredBySchema.optional(),
        part_of: crmP9IFormsPartOf1Schema.optional(),
      }),
    ),
  );

export const crmP4HasTimeSpanSchema: z.ZodSchema<CrmP4HasTimeSpan> = z.lazy(
  () =>
    z.object({
      _label: rdfsLabelSchema.optional(),
      type: genericString.and(timespanTypeSchema),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      edtf: genericString,
      begin_of_the_begin: crmP82ABeginOfTheBeginSchema.optional(),
      end_of_the_begin: crmP81AEndOfTheBeginSchema.optional(),
      begin_of_the_end: crmP81BBeginOfTheEndSchema.optional(),
      end_of_the_end: crmP82BEndOfTheEndSchema.optional(),
      duration: crmP191HadDurationSchema.optional(),
    }).strict(),
);

export const crmP191HadDurationSchema: z.ZodSchema<CrmP191HadDuration> = z.lazy(
  () =>
    z.object({
      _label: rdfsLabelSchema.optional(),
      type: genericString.and(dimensionTypeSchema),
      identified_by: crmP1IsIdentifiedBySchema.optional(),
      classified_as: crmP2HasTypeSchema.optional(),
      value: crmP90HasValueSchema,
      lower_value_limit: crmP90AHasLowerValueLimitSchema.optional(),
      upper_value_limit: crmP90AHasUpperValueLimitSchema.optional(),
      unit: crmP91HasUnitSchema,
      assigned_by: crmP141IWasAssignedBySchema.optional(),
    }),
);
