# Set bun image version
#ARG BUN_VERSION=1.1.21
ARG BUN_VERSION=1.1.8
FROM oven/bun:${BUN_VERSION}-alpine AS base

# Install bash, curl, and turbo for base, then clean up
RUN apk update && \
  apk add --no-cache bash curl nodejs && \
  bun install -g turbo@latest && \
  rm -rf /var/cache/apk/*

# Set working directory for base
WORKDIR /app

# Builder stage to compile the application
FROM base AS builder
COPY . .

# Prune and prepare the application
RUN bun install --filter='./packages/utils' && \
  turbo prune api --docker

# Installer stage to set up environment
FROM base AS installer

# Set working directory
WORKDIR /app

COPY --from=builder /app/out/json/ .
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/out/package-lock.json ./package-lock.json

# Install dependencies without audit to speed up the process
RUN bun install 

# Copy build artifacts
COPY --from=builder /app/out/full/ .
COPY --from=builder /app/turbo.json ./turbo.json

# FROM bun image AS runner stage to run the application
# FROM oven/bun:${BUN_VERSION}-alpine AS runner

# Install bash and curl (if required)
RUN apk update && \
    apk add --no-cache bash curl && \
    rm -rf /var/cache/apk/*

# Set working directory
# WORKDIR /app

# Set up non-root user
RUN addgroup --system honojs && \
  adduser --system --ingroup honojs honojs --uid 1001

USER honojs

# Copy application from the installer stage
# COPY --from=installer /app/node_modules ./node_modules
# COPY --from=installer /app/apps ./apps
# COPY --from=installer /app/packages ./packages

CMD ["bun", "run", "./apps/api/src/main.ts"]
